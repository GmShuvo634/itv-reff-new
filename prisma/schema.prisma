generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  email               String?               @unique
  name                String?
  phone               String                @unique
  password            String
  emailVerified       Boolean               @default(false)
  phoneVerified       Boolean               @default(false)
  referralCode        String                @unique
  referredBy          String?
  status              UserStatus            @default(ACTIVE)
  ipAddress           String?
  deviceId            String?
  walletBalance       Float                 @default(0)
  totalEarnings       Float                 @default(0)
  currentPositionId   String?
  positionStartDate   DateTime?
  positionEndDate     DateTime?
  depositPaid         Float                 @default(0)
  isIntern            Boolean               @default(true)
  failedLoginAttempts Int?                  @default(0)
  lastFailedLogin     DateTime?
  lockedUntil         DateTime?
  lastLoginAt         DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  commissionBalance   Float                 @default(0)
  fundPassword        String?
  activityLogs        ActivityLog[]
  bankCards           BankCard[]
  referralActivities  ReferralActivity[]
  referrerHierarchy   ReferralHierarchy[]   @relation("ReferrerHierarchy")
  referralHierarchy   ReferralHierarchy[]   @relation("UserReferralHierarchy")
  systemLogs          SystemLog[]
  subordinateBonuses  TaskManagementBonus[] @relation("SubordinateBonuses")
  managementBonuses   TaskManagementBonus[] @relation("UserManagementBonuses")
  TopupRequest        TopupRequest[]
  userPlan            UserPlan?
  userProfile         UserProfile?
  videoTasks          UserVideoTask[]
  currentPosition     PositionLevel?        @relation(fields: [currentPositionId], references: [id])
  referrer            User?                 @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals           User[]                @relation("UserReferrals")
  transactions        WalletTransaction[]
  withdrawalRequests  WithdrawalRequest[]
  // Announcement relations
  userAnnouncements   UserAnnouncement[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  realName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model BankCard {
  id             String   @id @default(cuid())
  userId         String
  cardHolderName String
  bankName       BankType
  accountNumber  String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bank_cards")
}

model PositionLevel {
  id          String   @id @default(cuid())
  name        String   @unique // "Intern", "P1", "P2", etc.
  level       Int      @unique // 0 for Intern, 1 for P1, 2 for P2, etc.
  deposit     Float // Security deposit required (0 for Intern)
  tasksPerDay Int // Number of tasks allowed per day
  unitPrice   Float // Price per task in PKR
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  videos      Video[]

  @@map("position_levels")
}

model Plan {
  id              String     @id @default(cuid())
  name            String
  description     String?
  price           Float
  durationDays    Int
  dailyVideoLimit Int
  rewardPerVideo  Float
  referralBonus   Float      @default(0)
  isActive        Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userPlans       UserPlan[]

  @@map("plans")
}

model UserPlan {
  id         String     @id @default(cuid())
  userId     String     @unique
  planId     String
  amountPaid Float
  startDate  DateTime
  endDate    DateTime
  status     PlanStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  plan       Plan       @relation(fields: [planId], references: [id])
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_plans")
}

model Video {
  id                 String          @id @default(cuid())
  title              String
  description        String?
  url                String
  thumbnailUrl       String?
  duration           Int
  rewardAmount       Float
  isActive           Boolean         @default(true)
  availableFrom      DateTime?
  availableTo        DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  positionLevelId    String?
  cloudinaryPublicId String?
  tags               String?
  uploadMethod       String          @default("file")
  videoTasks         UserVideoTask[]
  positionLevel      PositionLevel?  @relation(fields: [positionLevelId], references: [id])

  @@map("videos")
}

model UserVideoTask {
  id            String   @id @default(cuid())
  userId        String
  videoId       String
  watchedAt     DateTime
  watchDuration Int
  rewardEarned  Float
  positionLevel String?
  ipAddress     String?
  deviceId      String?
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video         Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
  @@map("user_video_tasks")
}

model WalletTransaction {
  id           String            @id @default(cuid())
  userId       String
  type         TransactionType
  amount       Float
  balanceAfter Float
  description  String
  referenceId  String            @unique
  status       TransactionStatus @default(COMPLETED)
  metadata     String?
  createdAt    DateTime          @default(now())
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

model WithdrawalRequest {
  id             String           @id @default(cuid())
  userId         String
  amount         Float
  paymentMethod  String
  paymentDetails String
  status         WithdrawalStatus @default(PENDING)
  adminNotes     String?
  processedAt    DateTime?
  transactionId  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("withdrawal_requests")
}

model ReferralActivity {
  id             String         @id @default(cuid())
  referrerId     String
  referredUserId String?
  referralCode   String
  ipAddress      String?
  userAgent      String?
  source         String?
  status         ReferralStatus @default(PENDING)
  rewardAmount   Float?
  rewardPaidAt   DateTime?
  metadata       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  referrer       User           @relation(fields: [referrerId], references: [id], onDelete: Cascade)

  @@map("referral_activities")
}

model ReferralReward {
  id             String    @id @default(cuid())
  name           String
  description    String?
  triggerEvent   String
  rewardAmount   Float
  isActive       Boolean   @default(true)
  validFrom      DateTime  @default(now())
  validUntil     DateTime?
  maxRewards     Int?
  currentRewards Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("referral_rewards")
}

model AdminUser {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  role          AdminRole      @default(ADMIN)
  lastLogin     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  phone         String         @unique
  activityLogs  ActivityLog[]
  apiKeys       ApiKey[]
  auditLogs     AuditLog[]
  fileUploads   FileUpload[]
  systemLogs    SystemLog[]
  // Announcement relations
  announcements Announcement[]

  @@map("admin_users")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model ReferralHierarchy {
  id         String        @id @default(cuid())
  userId     String
  referrerId String
  level      ReferralLevel
  createdAt  DateTime      @default(now())
  referrer   User          @relation("ReferrerHierarchy", fields: [referrerId], references: [id], onDelete: Cascade)
  user       User          @relation("UserReferralHierarchy", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, referrerId])
  @@map("referral_hierarchy")
}

model TaskManagementBonus {
  id               String        @id @default(cuid())
  userId           String
  subordinateId    String
  subordinateLevel ReferralLevel
  bonusAmount      Float
  taskDate         DateTime
  taskIncome       Float
  createdAt        DateTime      @default(now())
  subordinate      User          @relation("SubordinateBonuses", fields: [subordinateId], references: [id], onDelete: Cascade)
  user             User          @relation("UserManagementBonuses", fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_management_bonuses")
}

model AuditLog {
  id          String      @id @default(cuid())
  action      AuditAction
  description String
  details     String?
  adminId     String?
  createdAt   DateTime    @default(now())
  ipAddress   String?
  targetId    String?
  targetType  String
  userAgent   String?
  admin       AdminUser?  @relation(fields: [adminId], references: [id])

  @@map("audit_logs")
}

model SystemNotification {
  id         String               @id @default(cuid())
  type       NotificationType
  title      String
  message    String
  severity   NotificationSeverity @default(INFO)
  metadata   String?
  actionUrl  String?
  createdAt  DateTime             @default(now())
  isRead     Boolean              @default(false)
  readAt     DateTime?
  targetId   String?
  targetType String?

  @@map("system_notifications")
}

model FileUpload {
  id               String         @id @default(cuid())
  metadata         String?
  createdAt        DateTime       @default(now())
  fileName         String
  filePath         String
  fileSize         Int
  isProcessed      Boolean        @default(false)
  mimeType         String
  originalName     String
  processingStatus String?
  updatedAt        DateTime       @updatedAt
  uploadType       FileUploadType
  uploadedBy       String?
  uploader         AdminUser?     @relation(fields: [uploadedBy], references: [id])

  @@map("file_uploads")
}

model ActivityLog {
  id          String     @id @default(cuid())
  activity    String
  description String
  metadata    String?
  adminId     String?
  createdAt   DateTime   @default(now())
  ipAddress   String?
  sessionId   String?
  userAgent   String?
  userId      String?
  admin       AdminUser? @relation(fields: [adminId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([adminId])
  @@index([createdAt])
  @@map("activity_logs")
}

model SystemLog {
  id        String     @id @default(cuid())
  level     LogLevel
  component String
  message   String
  error     String?
  metadata  String?
  adminId   String?
  createdAt DateTime   @default(now())
  userId    String?
  admin     AdminUser? @relation(fields: [adminId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])

  @@index([level])
  @@index([component])
  @@index([createdAt])
  @@map("system_logs")
}

model DashboardCache {
  id        String   @id @default(cuid())
  data      String
  cacheKey  String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  updatedAt DateTime @updatedAt

  @@index([cacheKey])
  @@index([expiresAt])
  @@map("dashboard_cache")
}

model ApiKey {
  id          String     @id @default(cuid())
  name        String
  key         String     @unique
  permissions String[]
  metadata    String?
  createdAt   DateTime   @default(now())
  createdBy   String?
  expiresAt   DateTime?
  isActive    Boolean    @default(true)
  lastUsedAt  DateTime?
  updatedAt   DateTime   @updatedAt
  creator     AdminUser? @relation(fields: [createdBy], references: [id])

  @@map("api_keys")
}

model AdminWallet {
  id               String         @id @default(cuid())
  walletType       BankType
  walletNumber     String
  walletHolderName String
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  topupRequests    TopupRequest[]

  @@map("admin_wallets")
}

model TopupRequest {
  id               String      @id @default(cuid())
  userId           String
  amount           Float
  selectedWalletId String
  paymentProof     String?
  status           TopupStatus @default(PENDING)
  adminNotes       String?
  processedAt      DateTime?
  transactionId    String?     @unique
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  selectedWallet   AdminWallet @relation(fields: [selectedWalletId], references: [id])
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("topup_requests")
}

model UserAnnouncement {
  id             String       @id @default(cuid())
  userId         String
  announcementId String
  isRead         Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@index([isRead])
  @@map("user_announcements")
}

model Announcement {
  id                String             @id @default(cuid())
  title             String
  message           String
  imageUrl          String?
  targetType        String?            @default("all")
  targetId          String?
  scheduleType      String             @default("immediate")
  scheduledAt       DateTime?
  expiresAt         DateTime?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  adminId           String
  admin             AdminUser          @relation(fields: [adminId], references: [id])
  // Relation to track which users have seen this announcement
  userAnnouncements UserAnnouncement[]

  @@index([isActive])
  @@index([scheduledAt])
  @@index([expiresAt])
  @@map("announcements")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum BankType {
  JAZZCASH
  EASYPAISA
}

enum PlanStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum TransactionType {
  CREDIT
  DEBIT
  POSITION_DEPOSIT
  REFERRAL_REWARD_A
  REFERRAL_REWARD_B
  REFERRAL_REWARD_C
  MANAGEMENT_BONUS_A
  MANAGEMENT_BONUS_B
  MANAGEMENT_BONUS_C
  TASK_INCOME
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum ReferralStatus {
  PENDING
  REGISTERED
  QUALIFIED
  REWARDED
  EXPIRED
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum ReferralLevel {
  A_LEVEL
  B_LEVEL
  C_LEVEL
}

enum AuditAction {
  USER_CREATED
  USER_UPDATED
  USER_STATUS_CHANGED
  USER_BALANCE_UPDATED
  VIDEO_CREATED
  VIDEO_UPDATED
  VIDEO_DELETED
  VIDEO_STATUS_CHANGED
  WITHDRAWAL_APPROVED
  WITHDRAWAL_REJECTED
  SETTINGS_UPDATED
  ADMIN_LOGIN
  ADMIN_LOGOUT
  BULK_UPDATE
  DATA_EXPORT
}

enum NotificationType {
  SYSTEM_ALERT
  USER_ACTION
  WITHDRAWAL_REQUEST
  VIDEO_UPLOAD
  USER_REGISTRATION
  MAINTENANCE
  SECURITY_ALERT
  TASK_COMPLETED
}

enum NotificationSeverity {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum FileUploadType {
  VIDEO
  THUMBNAIL
  AVATAR
  DOCUMENT
  OTHER
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum TopupStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AnnouncementTargetType {
  ALL
  SPECIFIC_USERS
  SPECIFIC_LEVELS
  SPECIFIC_ROLES
}
